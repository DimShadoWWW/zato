"""migrate_from_2.0.8_to_411a1ddb

Revision ID: 0d1ac9c22670
Revises: 0028b_ae7849785be8
Create Date: 2017-12-14 15:35:05.578382

"""

# Revision identifiers, used by Alembic.
revision = '0030_0d1ac9c22670'
down_revision = '0029_ae7849785be8'

from alembic import context, op
import sqlalchemy as sa

# Zato
from zato.common.odb import model

# Pass this as a naming_convention= kwarg to batch_alter_table() in order to
# resolve unnamed constraint exceptions with SQLite. This is the default
# format used by PostgreSQL, it is likely if there are other databases to
# be supported, we will need to mimic their default naming behaviour by
# dynamically switching this at runtime, according to the driver in use.
naming_convention = {
    "fk": "%(table_name)s_%(column_0_name)s_fkey",
}

def db_type():
    config = context.config.get_section('alembic')
    return config.get('sqlalchemy.url').split(':')[0]

def always_if_sqlite():
    if db_type() == 'sqlite':
        return 'always'
    else:
        return 'auto'


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('kv_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.LargeBinary(), nullable=False),
    sa.Column('value', sa.LargeBinary(), nullable=True),
    sa.Column('data_type', sa.String(length=200), nullable=False),
    sa.Column('creation_time', sa.DateTime(), nullable=False),
    sa.Column('expiry_time', sa.DateTime(), nullable=True),
    sa.Column('cluster_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['cluster.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('kv_data', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.create_index('key_clust_id_idx', ['key', 'cluster_id'], unique=True, mysql_length={'key': 767})

    op.create_table('out_stomp',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('username', sa.String(length=200), server_default='guest', nullable=True),
    sa.Column('password', sa.String(length=200), nullable=True),
    sa.Column('address', sa.String(length=200), server_default='localhost:61613', nullable=False),
    sa.Column('proto_version', sa.String(length=20), server_default='1.0', nullable=False),
    sa.Column('timeout', sa.Integer(), server_default='10', nullable=False),
    sa.Column('cluster_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cluster_id'], ['cluster.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'cluster_id')
    )
    op.create_table('sec_jwt',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ttl', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['sec_base.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('channel_web_socket',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=False),
    sa.Column('address', sa.String(length=200), nullable=False),
    sa.Column('data_format', sa.String(length=20), nullable=False),
    sa.Column('new_token_wait_time', sa.Integer(), nullable=False),
    sa.Column('token_ttl', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=True),
    sa.Column('cluster_id', sa.Integer(), nullable=False),
    sa.Column('security_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['cluster_id'], ['cluster.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['security_id'], ['sec_base.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address', 'cluster_id'),
    sa.UniqueConstraint('name', 'cluster_id')
    )
    op.create_table('channel_stomp',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('username', sa.String(length=200), server_default='guest', nullable=True),
    sa.Column('password', sa.String(length=200), nullable=True),
    sa.Column('address', sa.String(length=200), server_default='localhost:61613', nullable=False),
    sa.Column('proto_version', sa.String(length=20), server_default='1.0', nullable=False),
    sa.Column('timeout', sa.Integer(), server_default='10', nullable=False),
    sa.Column('sub_to', sa.Text(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('cluster_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['cluster_id'], ['cluster.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'cluster_id')
    )
    op.create_table('sec_vault_conn',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('url', sa.String(length=200), nullable=False),
    sa.Column('token', sa.String(length=200), nullable=True),
    sa.Column('default_auth_method', sa.String(length=200), nullable=True),
    sa.Column('timeout', sa.Integer(), nullable=False),
    sa.Column('allow_redirects', sa.Boolean(), nullable=False),
    sa.Column('tls_verify', sa.Boolean(), nullable=False),
    sa.Column('tls_key_cert_id', sa.Integer(), nullable=True),
    sa.Column('tls_ca_cert_id', sa.Integer(), nullable=True),
    sa.Column('service_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['sec_base.id'], ),
    sa.ForeignKeyConstraint(['service_id'], ['service.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tls_ca_cert_id'], ['sec_tls_ca_cert.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tls_key_cert_id'], ['sec_tls_key_cert.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('web_socket_client',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=False),
    sa.Column('pub_client_id', sa.String(length=200), nullable=False),
    sa.Column('ext_client_id', sa.String(length=200), nullable=False),
    sa.Column('ext_client_name', sa.String(length=200), nullable=True),
    sa.Column('local_address', sa.String(length=250), nullable=False),
    sa.Column('peer_address', sa.String(length=250), nullable=False),
    sa.Column('peer_fqdn', sa.String(length=250), nullable=False),
    sa.Column('connection_time', sa.DateTime(), nullable=False),
    sa.Column('last_seen', sa.DateTime(), nullable=False),
    sa.Column('server_proc_pid', sa.Integer(), nullable=False),
    sa.Column('server_name', sa.String(length=200), nullable=False),
    sa.Column('channel_id', sa.Integer(), nullable=False),
    sa.Column('server_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['channel_id'], ['channel_web_socket.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['server_id'], ['server.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('web_socket_client', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.create_index('wscl_cli_ext_i_idx', ['ext_client_id'], unique=False)
        batch_op.create_index('wscl_cli_ext_n_idx', ['ext_client_name'], unique=False)
        batch_op.create_index('wscl_pr_addr_idx', ['peer_address'], unique=False)
        batch_op.create_index('wscl_pr_fqdn_idx', ['peer_fqdn'], unique=False)
        batch_op.create_index('wscl_pub_client_idx', ['pub_client_id'], unique=True)

    op.create_table('web_socket_sub',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_internal', sa.Boolean(), nullable=False),
    sa.Column('pattern', sa.String(length=400), nullable=False),
    sa.Column('is_by_ext_id', sa.Boolean(), nullable=False),
    sa.Column('is_by_channel', sa.Boolean(), nullable=False),
    sa.Column('is_durable', sa.Boolean(), nullable=False),
    sa.Column('has_gd', sa.Boolean(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=True),
    sa.Column('channel_id', sa.Integer(), nullable=True),
    sa.Column('server_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['channel_id'], ['channel_web_socket.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['client_id'], ['web_socket_client.id'], ondelete='CASCADE', name='web_socket_sub_client_id_fkey'),
    sa.ForeignKeyConstraint(['server_id'], ['server.id'], ondelete='CASCADE', name='web_socket_sub_server_id_fkey'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('web_socket_sub', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.create_index('wssub_patt_idx', ['pattern'], unique=False)
        batch_op.create_index('wssub_patt_is_idx', ['pattern', 'is_internal', 'is_by_ext_id', 'is_by_channel'], unique=False)

    with op.batch_alter_table('channel_amqp', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.add_column(sa.Column('ack_mode', sa.String(length=20), nullable=False, server_default='auto'))
        batch_op.add_column(sa.Column('pool_size', sa.Integer(), nullable=False, server_default='1'))

    with op.batch_alter_table('channel_zmq', schema=None, naming_convention=naming_convention, recreate=always_if_sqlite()) as batch_op:
        batch_op.add_column(sa.Column('pool_strategy', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('service_source', sa.String(length=20), nullable=False))
        batch_op.add_column(sa.Column('socket_method', sa.String(length=20), nullable=False))

    with op.batch_alter_table('conn_def_amqp', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.drop_column('def_type')

    with op.batch_alter_table('http_soap', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.add_column(sa.Column('content_type', sa.String(length=200), nullable=True))
        batch_op.add_column(sa.Column('sec_use_rbac', sa.Boolean(), nullable=False, server_default='0'))

    with op.batch_alter_table('out_amqp', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.add_column(sa.Column('pool_size', sa.SmallInteger(), nullable=False, server_default='1'))

    with op.batch_alter_table('out_zmq', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.add_column(sa.Column('socket_method', sa.String(length=20), nullable=False, server_default='connect'))

    with op.batch_alter_table('server', schema=None, naming_convention=naming_convention) as batch_op:
        batch_op.add_column(sa.Column('crypto_use_tls', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('preferred_address', sa.String(length=400), nullable=True))


def downgrade():
    raise NotImplementedError
