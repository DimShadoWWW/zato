"""deployed service unique

Revision ID: 97392b066756
Revises: 0031_00ad4c118b99
Create Date: 2017-12-19 16:27:53.399697

"""

# Revision identifiers, used by Alembic.
revision = '0032_97392b066756'
down_revision = '0031_00ad4c118b99'

from alembic import context, op
import sqlalchemy as sa


# Zato
from zato.common.odb import model

# Pass this as a naming_convention= kwarg to batch_alter_table() in order to
# resolve unnamed constraint exceptions with SQLite. This is the default
# format used by PostgreSQL, it is likely if there are other databases to
# be supported, we will need to mimic their default naming behaviour by
# dynamically switching this at runtime, according to the driver in use.
naming_convention = {
    "fk": "%(table_name)s_%(column_0_name)s_fkey",
}

def db_type():
    config = context.config.get_section('alembic')
    return config.get('sqlalchemy.url').split(':')[0]

def always_if_sqlite():
    if db_type() == 'sqlite':
        return 'always'
    else:
        return 'auto'

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('deployed_service', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['server_id', 'service_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('deployed_service', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    # ### end Alembic commands ###
